@dialogMargin:						10px;
@dialogBg:							rgba(80, 80, 80, 0.95);
@dialogButtonColour:				rgb(80, 80, 80);
@dialogButtonHoverColour:			rgb(115, 115, 115);
@dialogButtonDeleteHoverColour:		rgb(215, 40, 40);
@dialogItemBg:						rgba(255, 255, 255, 0.1);
@dialogItemHoverBg:					rgba(255, 255, 255, 0.3);
@dialogErrorBg:						rgb(115, 40, 40);

.dialog {
	position: absolute;
	background-color: @dialogBg;
	top: @toolbarHeight;
	bottom: @statusbarHeight;
	left: 0px;
	right: 0px;
	z-index: 2;
	overflow: auto;
	.fadein();
	
	.dialogcontent {
		position: absolute;
		top: @dialogMargin;
		bottom: @dialogMargin;
		left: @dialogMargin;
		right: @dialogMargin;
	}
	
	h1 {
		margin: 10px 0px;
		font-size: 1.2em;
		font-weight: bold;
	}
	
	hr {
		margin-bottom: 10px;
		height: 2px;
		border: none;
		background-color: @fg;
	}
	
	.button {
		float: right;
		display: inline-block;
		padding: 5px;
		min-width: 80px;
		background-image: none;
		background-color: @dialogButtonColour;
		.transition(background-color);
		color: @fg;
		height: 20px;
		text-decoration: none;
		font-weight: bold;
		text-align: center;
		border-radius: @editorBorderRadius;
	}
	
	.button:hover {
		background-color: @dialogButtonHoverColour;
	}
	
	.button.closebutton {
		position: relative;
		top: 3px;
		width: 70px;
		min-width: 70px;
		text-align: left;
		padding-left: 30px;
		.icon(@iconTick);
	}
	
	.button.resetbutton {
		position: relative;
		top: 3px;
		width: 50px;
		min-width: 50px;
		text-align: left;
		padding-left: 30px;
		margin-left: 10px;
		.icon(@iconCross);
	}
	
	.button.addbutton {
		width: 100px;
		text-align: left;
		padding-left: 30px;
		.icon(@iconAdd);
	}
	
	.button.deletebutton {
		position: absolute;
		top: 10px;
		right: 10px;
		min-width: 20px;
		width: 20px;
		.icon(@iconCross);
	}
	
	.button.deletebutton:hover {
		background-color: @dialogButtonDeleteHoverColour;
	}
	
	.item {
		position: relative;
		margin-bottom: 10px;
		padding: 40px 10px 10px 10px;
		left: 0px;
		right: 10px;
		background-color: @dialogItemBg;
		.transition(background-color);
		
		.inputcontainer {
			position: absolute;
			height: 30px;
			top: 10px;
		}
		
		.inputcontainer.inputid {
			left: 10px;
			width: 190px;
		}
		
		.inputcontainer.inputpath {
			left: 220px;
			right: 60px;
		}
		
		input {
			width: 100%;
			height: 100%;
		}
	}
	
	.item:hover {
		background-color: @dialogItemHoverBg;
	}
	
	.error {
		position: relative;
		margin-top: 10px;
		padding: 5px 10px 5px 30px;
		height: 20px;
		left: 0px;
		right: 10px;
		background-color: @dialogErrorBg;
		background-image: url(../images/editor/error.png);
		background-repeat: no-repeat;
		background-position: 5px 5px;
		border-radius: @editorBorderRadius;
	}
	
	.field {
		width: 100%;
		min-height: 30px;
		margin: 20px 10px;
		
		label {
			display: inline-block;
			float: left;
			width: 30%;
			text-align: right;
			margin: 5px 20px 0px 0px;
		}
		
		label.dimension {
			float: none;
			width: auto;
			height: 100%;
			text-align: left;
			margin: 5px;
			vertical-align: top;
		}
		
		input,
		textarea {
			width: 50%;
		}
	}
	
	.togglebutton {
		display: inline-block;
		padding: 5px 5px 5px 30px;
		min-width: 80px;
		margin-right: 20px;
		background-color: @dialogButtonColour;
		.transition(background-color);
		color: @fg;
		height: 20px;
		text-decoration: none;
		font-weight: bold;
		border-radius: @editorBorderRadius;
		.icon(@iconCross);
	}
	
	.togglebutton:hover {
		background-color: @dialogButtonHoverColour;
	}
	
	.togglebutton.checked {
		.icon(@iconTick);
	}
	
	.mapproperties {
		margin-top: 40px;
	}
	
	.dropdown {
		a {
			background-color: @dialogButtonColour;
		}
		
		a:hover {
			background-color: @dialogButtonHoverColour;
		}
		
		> a {
			border-radius: @editorBorderRadius;
		}
	}
	
	.dropdown:hover {
		> a {
			border-radius: @editorBorderRadius @editorBorderRadius 0px 0px;
			background-color: @dialogButtonHoverColour;
		}
	}
}

.dialog.worldproperties,
.dialog.login {
	.errors {
		position: relative;
		top: -10px;
	}
	
	.error {
		margin: 10px 0px 0px 0px;
	}
}

.dialog.itemlibrary {
	.button.closebutton {
		.icon(@iconCross);
	}
}

div.editor.showbackgrounds {
	.dialog.backgrounds {
		.fadeout();
	}
	
	.button.backgroundsbutton {
		background-color: @buttonHoverColour;
	}
}

div.editor.showtextureatlases {
	.dialog.textureatlases {
		.fadeout();
	}
	
	.button.textureatlasesbutton {
		background-color: @buttonHoverColour;
	}
}

div.editor.showproperties {
	.dialog.worldproperties {
		.fadeout();
	}
	
	.button.propertiesbutton {
		background-color: @buttonHoverColour;
	}
}

div.editor.showaddtiletype {
	.dialog.addtiletype {
		.fadeout();
	}
}

div.editor.showedittiletype {
	.dialog.edittiletype {
		.fadeout();
	}
}

div.editor.showlogin {
	.dialog.login {
		.fadeout();
	}
}

div.editor.showitemlibrary {
	.dialog.itemlibrary {
		.fadeout();
	}
}

.dialog.addtiletype,
.dialog.edittiletype {
	.button.deletebutton {
		float: right;
		display: inline-block;
		padding: 5px;
		width: 50px;
		min-width: 50px;
		position: relative;
		top: 3px;
		left: 0px;
		text-align: left;
		padding-left: 30px;
		margin-left: 10px;
		.icon(@iconCross);
	}
	
	.togglebutton.tilecollision {
		padding: 0px;
		height: 30px;
		width: 30px;
		min-width: 30px;
		margin: 0px 5px 0px 0px;
		.transition(all);
	}
	
	.togglebutton#tiletypebreathable {
		.transition(opacity);
	}
	
	.togglebutton.tilecollision.checked {
		background-color: @dialogButtonHoverColour;
	}
	
	.togglebutton.disabled,
	.togglebutton.disabled:hover,
	.togglebutton.disabled.checked {
		background-color: @dialogButtonColour;
		opacity: 0.3;
	}
	
	.togglebutton.solidtilebutton {
		.icon(@iconSolidTile);
	}
	
	.togglebutton.topedgetilebutton {
		.icon(@iconTopEdgeTile);
	}
	
	.togglebutton.bottomedgetilebutton {
		.icon(@iconBottomEdgeTile);
	}
	
	.togglebutton.rightedgetilebutton {
		.icon(@iconRightEdgeTile);
	}
	
	.togglebutton.leftedgetilebutton {
		.icon(@iconLeftEdgeTile);
	}
	
	.togglebutton.liquidtilebutton {
		.icon(@iconWaterTile);
	}
	
	.togglebutton.laddertilebutton {
		.icon(@iconLadderTile);
	}
}

.dialog.login {
	.button.resetbutton {
		width: 70px;
	}
}

.dialog.itemlibrary {
	@itemButtonSize:	32px;
	
	.itembuttons {
		position: absolute;
		top: 55px;
		bottom: 0px;
		left: 0px;
		right: 0px;
		overflow-x: hidden;
		overflow-y: auto;
	}
	
	a.itembutton {
		position: relative;
		display: inline-block;
		margin: 5px;
		height: @itemButtonSize;
		width: @itemButtonSize;
		background-color: transparent;
		border-radius: @editorBorderRadius;
		z-index: 1;
		.transition(background-color);
		
		.imagecontainer {
			position: absolute;
			top: 0px;
			left: 0px;
			width: 100%;
			height: 100%;
			overflow: hidden;
			pointer-events: none;
			
			img {
				position: absolute;
				border: none;
				image-rendering: optimizeSpeed;
				image-rendering: -moz-crisp-edges;
				image-rendering: -webkit-optimize-contrast;
				image-rendering: -o-crisp-edges; 
				image-rendering: optimize-contrast;
				-ms-interpolation-mode: nearest-neighbor;
			}
		}
	}
	
	a.itembutton:hover {
		background-color: @buttonHoverColour;
	}
	
	a.itembutton.additembutton:hover {
		background-color: @buttonHoverColour;
	}
	
	a.itembutton.entitybutton.type_actorstate {
		.entityIcon(@entityIconActorStateTrigger);
	}
	
	a.itembutton.entitybutton.type_actorspawn {
		.entityIcon(@entityIconActorSpawnTrigger);
	}
	
	a.itembutton.entitybutton.type_actorhealth {
		.entityIcon(@entityIconActorHealthTrigger);
	}
	
	a.itembutton.entitybutton.type_camerashake {
		.entityIcon(@entityIconCameraShakeTrigger);
	}
	
	a.itembutton.entitybutton.type_cameratarget {
		.entityIcon(@entityIconCameraTargetTrigger);
	}
	
	a.itembutton.entitybutton.type_caption {
		.entityIcon(@entityIconCaptionTrigger);
	}
	
	a.itembutton.entitybutton.type_collision {
		.entityIcon(@entityIconCollisionMarker);
	}
	
	a.itembutton.entitybutton.type_counter {
		.entityIcon(@entityIconCounter);
	}
	
	a.itembutton.entitybutton.type_damage {
		.entityIcon(@entityIconDamageMarker);
	}
	
	a.itembutton.entitybutton.type_delay {
		.entityIcon(@entityIconDelay);
	}
	
	a.itembutton.entitybutton.type_force {
		.entityIcon(@entityIconForceMarker);
	}
	
	a.itembutton.entitybutton.type_global {
		.entityIcon(@entityIconGlobalFlagTrigger);
	}
	
	a.itembutton.entitybutton.type_inventory {
		.entityIcon(@entityIconInventoryMarker);
	}
	
	a.itembutton.entitybutton.type_jump {
		.entityIcon(@entityIconJumpMarker);
	}
	
	a.itembutton.entitybutton.type_latch {
		.entityIcon(@entityIconLatch);
	}
	
	a.itembutton.entitybutton.type_lightstate {
		.entityIcon(@entityIconLightStateTrigger);
	}
	
	a.itembutton.entitybutton.type_maptransition {
		.entityIcon(@entityIconMapTransitionTrigger);
	}
	
	a.itembutton.entitybutton.type_move {
		.entityIcon(@entityIconMoveMarker);
	}
	
	a.itembutton.entitybutton.type_nand {
		.entityIcon(@entityIconNandGate);
	}
	
	a.itembutton.entitybutton.type_or {
		.entityIcon(@entityIconOrGate);
	}
	
	a.itembutton.entitybutton.type_particle {
		.entityIcon(@entityIconParticleEmitterTrigger);
	}
	
	a.itembutton.entitybutton.type_powerup {
		.entityIcon(@entityIconPowerupMarker);
	}
	
	a.itembutton.entitybutton.type_sound {
		.entityIcon(@entityIconSoundTrigger);
	}
	
	a.itembutton.entitybutton.type_music {
		.entityIcon(@entityIconMusicTrigger);
	}
	
	a.itembutton.entitybutton.type_timer {
		.entityIcon(@entityIconTimer);
	}
	
	a.itembutton.entitybutton.type_use {
		.entityIcon(@entityIconUseMarker);
	}
	
	a.itembutton.lightbutton.type_point {
		.entityIcon(@entityIconPointLight);
	}
	
	a.itembutton.lightbutton.type_spot {
		.entityIcon(@entityIconSpotLight);
	}
	
	a.itembutton.lightbutton.type_ambient {
		.entityIcon(@entityIconAmbientLight);
	}
	
	a.itembutton.entitybutton.type_playerstart {
		.entityIcon(@entityIconPlayerStart);
	}
}